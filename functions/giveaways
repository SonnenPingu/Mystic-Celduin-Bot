const { EmbedBuilder, ActionRowBuilder, ButtonBuilder } = require('discord.js');
const fs = require('fs');
const activeGiveaways = new Map();

async function saveGiveawaysToJson() {
    try {
        // Convert activeGiveaways Map to an array
        const giveawaysArray = Array.from(activeGiveaways, ([key, value]) => {
            // Modify giveaway data to convert BigInts to strings
            const modifiedValue = {
                ...value,
                channel: value.channel.id, // Replace Discord.js Channel object with its ID (string)
                interaction: null,  // Optionally remove the interaction object
                participants: value.participants.map(p => p.toString()), // Convert participants (if BigInt) to strings
                endTime: Number(value.endTime) // Convert endTime (if BigInt) to number
            };
            return [key, modifiedValue];
        });

        const jsonData = JSON.stringify(giveawaysArray, null, 2);
        fs.writeFileSync('giveaways.json', jsonData, 'utf-8');
        console.log('Giveaway information saved to giveaways.json successfully.');
    } catch (error) {
        console.error('Error saving giveaway information to giveaways.json:', error);
    }
}

function loadGiveawaysFromJson(client) {
    try {
        if (fs.existsSync('giveaways.json')) {
            const data = fs.readFileSync('giveaways.json', 'utf-8');
            const giveawaysArray = JSON.parse(data);

            giveawaysArray.forEach(([key, value]) => {
                const channel = client.channels.cache.get(value.channel);
                if (channel) {
                    const giveawayData = {
                        ...value,
                        channel: channel,
                        participants: value.participants.map(p => BigInt(p)),
                        endTime: BigInt(value.endTime), // Convert endTime back to BigInt
                    };
                    activeGiveaways.set(key, giveawayData);

                    const remainingTime = Number(giveawayData.endTime) - Date.now();
                    if (remainingTime > 0) {
                        setTimeout(() => endGiveaway(key, value.numWinners), remainingTime);
                    } else {
                        endGiveaway(key, value.numWinners);
                    }
                }
            });

            console.log('Giveaway information loaded from giveaways.json successfully.');
        }
    } catch (error) {
        console.error('Error loading giveaway information from giveaways.json:', error);
    }
}

async function endGiveaway(giveawayMessageId, numWinners) {
    try {
        const giveawayData = activeGiveaways.get(giveawayMessageId);

        if (giveawayData) {
            const winners = [];
            console.log('participants:', giveawayData.participants);
            const channel = giveawayData.channel;

            if (giveawayData.participants.length > 0) {
                const uniqueParticipants = Array.from(new Set(giveawayData.participants));
                if (uniqueParticipants.length > 0) {
                    for (let i = 0; i < numWinners; i++) {
                        const winnerId = uniqueParticipants[Math.floor(Math.random() * uniqueParticipants.length)];
                        const winner = await channel.guild.members.fetch(winnerId);
                        if (winner) {
                            winners.push(winner);
                            uniqueParticipants.splice(uniqueParticipants.indexOf(winnerId), 1);
                        }
                    }
                    if (winners.length > 0) {
                        const winnerNames = winners.map(winner => winner.toString()).join(', ');
                        channel.send(`The winners of "${giveawayData.prize}" are: ${winnerNames}!`);

                        // Disable the button
                        const message = await channel.messages.fetch(giveawayMessageId);
                        if (!message) return;

                        const row = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setLabel('Teilnehmen!')
                                    .setStyle('Primary')
                                    .setCustomId('teilnahme-button')
                                    .setDisabled(true)
                            );

                        await message.edit({ components: [row] });
                    } else {
                    console.log('No winners found.');
channel.send(`Nobody won the giveaway for "${giveawayData.prize}".`);
                    }
                } else {
                   console.log('No unique participants found.');
channel.send(`Nobody won the giveaway for "${giveawayData.prize}".`);
                }
            } else {
                console.log("No participants found.");
channel.send(`Nobody entered the giveaway for "${giveawayData.prize}".`);
            }

            activeGiveaways.delete(giveawayMessageId);
            saveGiveawaysToJson();
        }
    } catch (error) {
        console.error('Error ending giveaway:', error);
    }
}

async function startGiveaway(interaction, timeInSeconds, prize, numWinners) {
    try {
        const targetChannel = interaction.channel;
        const role1Id = '1093589980720410655'; // Replace with your actual role ID
        const role2Id = '917796323921637446'; // Replace with your actual role ID

        const announcementText = `Dear <@&${role1Id}> <@&${role2Id}>a new giveaway has started!`;
        await targetChannel.send(announcementText);



        const button = new ButtonBuilder()
            .setLabel('Teilnehmen!')
            .setStyle('Primary')
            .setCustomId('teilnahme-button');

        const row = new ActionRowBuilder()
            .addComponents(button);

        const embed = new EmbedBuilder()
            .setTitle('ðŸŽ‰ Gewinnspiel ðŸŽ‰')
            .setColor('#FFD700')
            .setFooter({ text: 'This giveaway is hosted by xx.\nThere is no right to a payout of the winnings.' });

            .addFields(
                { name: 'Action', value: 'Click the button to participate!' }
                { name: 'prize', value: prize },
                { name: 'Ends at', value: `<t:${Math.floor((Date.now() + timeInSeconds * 1000) / 1000)}:F>` },
                { name: 'Number of winners', value: numWinners.toString() }
            );

        const giveawayMessage = await interaction.channel.send({ embeds: [embed], components: [row] });

        const giveawayData = {
            channel: interaction.channel,
            prize: prize,
            participants: [],
            endTime: Date.now() + timeInSeconds * 1000, // Store the end time as a timestamp (number)
            numWinners: numWinners
        };
        activeGiveaways.set(giveawayMessage.id, giveawayData);

        saveGiveawaysToJson();

        setTimeout(() => endGiveaway(giveawayMessage.id, numWinners), timeInSeconds * 1000);
    } catch (error) {
        console.error('Error when starting the raffle:', error);
        await interaction.followUp({ content: 'An error occurred when starting the competition.', ephemeral: true });
    }
}
module.exports = {
    activeGiveaways,
    saveGiveawaysToJson,
    loadGiveawaysFromJson,
    endGiveaway,
    startGiveaway
};